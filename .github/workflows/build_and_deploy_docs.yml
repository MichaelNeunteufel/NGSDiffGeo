name: Build and Deploy Docs

on:
  push:
    branches:
      - main
    tags:
      - '*'

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-13]
        # os: [ubuntu-latest]
        cibw_build: 
          - cp39-* cp310-* cp311-* cp312-* cp313-*
        include:
          - os: windows-2019
            cibw-arch: AMD64
            cmake-generator: "Visual Studio 16 2019"
            cmake_generator_platform: "x64"
            cibw_build: cp39-* cp310-* cp311-* cp312-* cp313-*
    env:
      CIBW_BUILD: ${{ matrix.cibw_build }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
          fetch-tags: true
          fetch-depth: 0

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.19.0

      - name: Save Python version tag (Ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          PY_TAG="cp$(python3 -c 'import sys; print(f"{sys.version_info.major}{sys.version_info.minor}")')"
          echo "$PY_TAG" > py_version_tag.txt
          echo "PY_TAG=$PY_TAG" >> $GITHUB_ENV
        

      - name: Upload Python version tag (Ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: python-version-tag
          path: py_version_tag.txt

      # - name: Extract Python version from PY_TAG (Ubuntu only)
      #   if: matrix.os == 'ubuntu-latest'
      #   run: |
      #     if [ -f py_version_tag.txt ]; then
      #       PY_TAG=$(cat py_version_tag.txt)
      #       PY_VER="${PY_TAG:2:1}.${PY_TAG:3:2}"
      #       echo "PY_VER=$PY_VER" >> $GITHUB_ENV
      #     else
      #       echo "PY_VER=3.10" >> $GITHUB_ENV
      #     fi

      # - name: Set up Python to match built wheel (Ubuntu only)
      #   if: matrix.os == 'ubuntu-latest'
      #   uses: actions/setup-python@v5
      #   with:
      #     python-version: ${{ env.PY_VER }}

      # - name: Install and extract NGSolve version (Ubuntu only)
      #   if: matrix.os == 'ubuntu-latest'
      #   run: |
      #     pip install ./wheelhouse/*.whl
      #     python -c 'import ngsolve; print(ngsolve.__version__)' > ngsolve_version.txt
      #     echo "Saved NGSolve version: $(cat ngsolve_version.txt)"

      # - name: Upload NGSolve version (Ubuntu only)
      #   if: matrix.os == 'ubuntu-latest'
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: ngsolve-version
      #     path: ngsolve_version.txt

      - name: Upload built wheels
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: built-wheels-ubuntu-latest-${{ env.PY_TAG }}
          path: ./wheelhouse/*.whl

      - name: Upload built wheels (non-Ubuntu)
        if: matrix.os != 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
          fetch-tags: true
          fetch-depth: 0

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-sdist
          path: dist/*.tar.gz

  build_and_deploy_docs:
    name: Build and Deploy Documentation
    runs-on: ubuntu-latest
    needs: [build_wheels, build_sdist]
    steps:
      - uses: actions/checkout@v4

      - name: Download Python version tag
        uses: actions/download-artifact@v4
        with:
          name: python-version-tag

      - name: List downloaded files
        run: ls -la

      - name: Read Python version tag
        id: pyver
        run: |
          PY_TAG=$(cat py_version_tag.txt)
          PY_VER="${PY_TAG:2:1}.${PY_TAG:3:2}"
          echo "PY_TAG=$PY_TAG" >> $GITHUB_ENV
          echo "PY_VER=$PY_VER" >> $GITHUB_ENV

      - name: Set up Python from PY_TAG
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PY_VER }}

      # - name: Download NGSolve version
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: ngsolve-version

      # - name: Read NGSolve version
      #   run: |
      #     NGSOLVE_VER=$(cat ngsolve_version.txt)
      #     echo "NGSOLVE_VER=$NGSOLVE_VER" >> $GITHUB_ENV

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pandoc

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r docs/requirements.txt
      # pip install "ngsolve==$NGSOLVE_VER"

      - name: Download built wheel
        uses: actions/download-artifact@v4
        with:
          name: built-wheels-ubuntu-latest-${{ env.PY_TAG }}

      - name: List wheel files
        run: ls -la

      - name: Install built wheel
        run: |
          WHEEL=$(ls *.whl | grep $PY_TAG || true)
          if [ -z "$WHEEL" ]; then
            echo "No wheel found matching Python version $PY_TAG"
            exit 1
          fi
          echo "Installing $WHEEL"
          pip install "$WHEEL"

      - name: Build docs with Sphinx
        working-directory: docs
        run: |
          make html

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: docs/_build/html
